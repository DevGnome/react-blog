{
  "posts": [
    {
      "id": 1,
      "title": "Create-React-App",
      "body": "Create React App is a tool maintained by the React Team that allows a basic setup for creating a React single-page application by running: npx create-react-app my-app. This creates the files, folders and dependencies to begin coding without heavy configuration. Two included dependencies that make life a little easier for us are babel and webpack. Babel takes the JSX that is used in React and converts it into vanilla javascript. Webpack helps check dependencies and bundles all of our files, modules and assets into one file for ease in sharing while also ensuring all packages needs are met. Create-react-app includes base files to help get you started creating which you are free to use or replace with your own files. Create-react-app is maintained by the React Team. Check out their website for more information and in-depth documentation.",
      "author": "Hugh Witchella",
      "created": "06/25/2022"
    },
    {
      "id": 2,
      "title": "React Router",
      "body": "<Routes> and <Route> are used by React Router to render based on the current location. When the location changes <Routes> looks at each <Route> it has as a child and to determine the new elements to render. <BrowserRouter> stores the current location in the address bar and navigates using the browser's history stack. React Router is built and maintained by Remix and hundreds of contributors.",
      "author": "Hugh Witchella",
      "created": "06/26/2022"
    },
    {
      "id": 3,
      "title": "useEffect",
      "body": "The main effect of a React functional component is to take in props and return JSX. If the function call makes changes outside of the function itself, it has side effects. The useEffect hook is called in this application to fetch data from the db.json file to get this blog data.  There are two parts to the useEffect hook: a callback function and a dependencies array. The callback function contains the side effect logic. The dependency array is optional and controls when the side effect will run. No dependencies will cause it to run every time the component renders, empty dependencies array will run it once, a dependency with variables will run the side effect whenever one of those variables changes. ",
      "author": "Hugh Witchella",
      "created": "06/27/2022"
    },
    {
      "id": 4,
      "title": "useState",
      "body": "State is dynamic data in React components. It has the ability to change, unlike props, as users interact with the application. The useState hook allows us to keep track of state and update it. The hook accepts an initial state and returns two values: the current state variable, and a function that updates the variable. A quick example: const [color, setColor] = useState(\"blue\"); The initial state given is the color blue, which will be assigned to color. Calling the function setColor can change that value in state.",
      "author": "Hugh Witchella",
      "created": "06/28/2022"
    },
    {
      "title": "test",
      "body": "test",
      "author": "test",
      "created": "07/19/2022",
      "id": 5
    }
  ]
}